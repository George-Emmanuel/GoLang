Data Structures in Go

1. Arrays
    - Fixed-size, same type elements.
    - Example:
      var arr [5]int

2. Slices
    - Dynamic-size, flexible view into arrays.
    - Example:
      s := []int{1, 2, 3}

3. Maps
    - Key-value pairs, like dictionaries.
    - Example:
      m := map[string]int{"a": 1, "b": 2}

4. Structs
    - Custom data types grouping fields.
    - Example:
      type Person struct {
            Name string
            Age  int
      }

5. Pointers
    - Hold memory addresses of values.
    - Example:
      var p *int

6. Linked Lists, Stacks, Queues, Trees, Graphs
    - Implemented using structs and pointers.

Example: Simple Struct and Map
------------------------------
type Student struct {
     ID   int
     Name string
}

students := map[int]Student{
     1: {ID: 1, Name: "Alice"},
     2: {ID: 2, Name: "Bob"},
}